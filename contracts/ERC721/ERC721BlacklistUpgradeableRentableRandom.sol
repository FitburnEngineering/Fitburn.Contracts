// SPDX-License-Identifier: UNLICENSED

// Author: TrejGun
// Email: trejgun@gemunion.io
// Website: https://gemunion.io/

pragma solidity ^0.8.13;

import "@openzeppelin/contracts/utils/Counters.sol";

import "./ERC721BlacklistUpgradeableRentable.sol";
import "./interfaces/IERC721Random.sol";
import "../Mechanics/Rarity/Rarity.sol";

/**
 * @dev Advanced preset of ERC721 token contract that includes the following extensions:
 *      - Simple (Gemunion)
 *        core functionality to work in Gemunion's ecosystem
 *      - Blacklist (Gemunion)
 *        provides access list to restrict suspicious account from interaction with tokens
 *      - ERC4906 (OpenSea)
 *        notifies marketplace about metadata update
 *      - ERC4907 (ThirdWeb)
 *        enables rent/borrow functionality
 *      - Rarity (Gemunion)
 *        calculates rarity dispersion and implements ChainLink VRF
 */
abstract contract ERC721BlacklistUpgradeableRentableRandom is
  IERC721Random,
  ERC721BlacklistUpgradeableRentable,
  Rarity
{
  using Counters for Counters.Counter;

  event MintRandom(uint256 requestId, address to, uint256 randomness, uint256 templateId, uint256 tokenId);

  struct Request {
    address account;
    uint256 templateId;
  }

  // mapping for storing random number requests
  mapping(uint256 => Request) internal _queue;

  constructor(
    string memory name,
    string memory symbol,
    uint96 royalty,
    string memory baseTokenURI
  ) ERC721BlacklistUpgradeableRentable(name, symbol, royalty, baseTokenURI) {}

  /**
   * @notice Disable minting without random
   */
  function mintCommon(address, uint256) external virtual override onlyRole(MINTER_ROLE) {
    revert MethodNotSupported();
  }

  /**
   * @dev Mint a random token for the specified `account` and `templateId`.
   * A random number is generated by calling the `getRandomNumber` function
   * and the returned value is used as a request ID to wait for the random
   * number to be generated by the Chainlink VRF oracle.
   * For more details https://docs.chain.link/vrf/v2/subscription/examples/get-a-random-number
   *
   * @param account The address of the account to receive the random token.
   * @param templateId The ID of the token template to use for the random token.
   */
  function mintRandom(address account, uint256 templateId) external onlyRole(MINTER_ROLE) {
    // check if receiver is not blacklisted
    require(!this.isBlacklisted(account), "Blacklist: receiver is blacklisted");
    // Reverts if the template ID is zero.
    if (templateId == 0) {
      revert TemplateZero();
    }
    // add request to the queue with requestId (getRandomNumber) as key
    _queue[getRandomNumber()] = Request(account, templateId);
  }

  /**
   * @dev Called by the VRF coordinator contract when the random number is generated.
   *
   * @param requestId ID of the request that generated the random number.
   * @param randomWords Array of random numbers generated by the VRF coordinator.
   */
  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual {
    // retrieve request data from the queue using the requestId as the key
    Request memory request = _queue[requestId];

    // get the current token ID
    uint256 tokenId = _tokenIdTracker.current();

    // Notify our server about successful MintRandom
    emit MintRandom(requestId, request.account, randomWords[0], request.templateId, tokenId + 1);

    // Update token metadata
    _upsertRecordField(tokenId, EARN_UPGRADE, 0);
    _upsertRecordField(tokenId, TIME_UPGRADE, 0);
    _upsertRecordField(tokenId, RARITY, _getRarity(randomWords[0]));

    delete _queue[requestId];

    // mint the requested token
    _mintCommon(request.account, request.templateId);
  }

  /**
   * @dev See {IERC165-supportsInterface}.
   */
  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
    return interfaceId == type(IERC721Random).interfaceId || super.supportsInterface(interfaceId);
  }

  /**
   * @dev abstract function for generating a random number and returning the request ID
   *      This function would be inherited from VRF coordinator contract
   */
  function getRandomNumber() internal virtual returns (uint256 requestId);
}
